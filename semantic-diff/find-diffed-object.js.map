{"version":3,"file":"find-diffed-object.js","sourceRoot":"","sources":["../src/semantic-diff/find-diffed-object.ts"],"names":[],"mappings":"AAAA,OAAO,EAAyB,YAAY,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAEzE,MAAM,UAAU,gBAAgB,CAAC,IAAyB,EAAE,IAAc;IACxE,IAAI,IAAI,GAAmC,IAAI,CAAC;IAEhD,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;QACvB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAC3B,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;gBACvB,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,qBAAqB,IAAI,kBAAkB,CAAC,CAAC;aAC9D;SAEF;aAAM,IAAI,IAAI,KAAK,YAAY,EAAE;YAChC,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;gBACtB,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;aACxB;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aACjE;SAEF;aAAM,IAAI,IAAI,KAAK,OAAO,EAAE;YAC3B,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;gBACnB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;aACnB;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;aAClE;SAEF;aAAM;YACL,4CAA4C;YAC5C,MAAM;SACP;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { DiffedObject, ASTNode, isParentNode, isElement } from './types';\n\nexport function findDiffedObject(root: ASTNode | ASTNode[], path: string[]) {\n  let node: DiffedObject | DiffedObject[]  = root;\n\n  for (const step of path) {\n    if (Array.isArray(node)) {\n      const i = parseFloat(step);\n      if (Number.isInteger(i)) {\n        node = node[i];\n      } else {\n        throw new Error(`Non-integer step: ${step} for array node.`);\n      }\n\n    } else if (step === 'childNodes') {\n      if (isParentNode(node)) {\n        node = node.childNodes;\n      } else {\n        throw new Error(`Cannot read childNodes from non-parent node.`);\n      }\n\n    } else if (step === 'attrs') {\n      if (isElement(node)) {\n        node = node.attrs;\n      } else {\n        throw new Error(`Cannot read attributes from non-element node.`);\n      }\n\n    } else {\n      // For all other steps we don't walk further\n      break;\n    }\n  }\n\n  return node;\n}"]}