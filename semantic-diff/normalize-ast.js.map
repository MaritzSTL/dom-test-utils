{"version":3,"file":"normalize-ast.js","sourceRoot":"","sources":["../src/semantic-diff/normalize-ast.ts"],"names":[],"mappings":"AACA,OAAO,EAAW,SAAS,EAAE,YAAY,EAAE,UAAU,EAAiB,MAAM,SAAS,CAAC;AAEtF,MAAM,iBAAiB,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC1D,MAAM,UAAU,GAAG,CAAC,IAAqB,EAAE,EAAE,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAEzF,SAAS,cAAc,CAAC,KAAkB;IACxC,OAAO,KAAK;QACV,kBAAkB;SACjB,GAAG,CAAC,CAAC,IAAe,EAAE,EAAE;QACvB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;SAC7D;QAED,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;QACF,eAAe;SACd,IAAI,CAAC,CAAC,KAAgB,EAAE,KAAgB,EAAE,EAAE;QAC3C,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnC,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,OAAO,CAAC,CAAC,CAAA;SACV;QAED,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,OAAO,CAAC,CAAA;SACT;QAED,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC;AAED,SAAS,mBAAmB,CAAC,KAAwB;IACnD,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAEnC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAS,EAAE,EAAE;QAChC,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,EAAE;gBACX,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;aAC5C;YAED,IAAI,CAAC,KAAK,SAAS,EAAE;gBACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;aAC5C;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,IAAa;IACxC,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;QACnB,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KACxC;IAED,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;QACtB,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QACpC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KACtD;AACH,CAAC","sourcesContent":["import { DefaultTreeNode, Attribute } from 'parse5-es-module';\nimport { ASTNode, isElement, isParentNode, isTextNode, isCommentNode } from './types';\n\nconst filteredNodeNames = ['style', 'script', '#comment'];\nconst filterNode = (node: DefaultTreeNode) => !filteredNodeNames.includes(node.nodeName);\n\nfunction sortAttributes(attrs: Attribute[]) {\n  return attrs\n    // Sort attributes\n    .map((attr: Attribute) => {\n      if (attr.name === 'class') {\n        attr.value = attr.value.trim().split(/\\s+/).sort().join(' ')\n      }\n\n      return attr;\n    })\n    // Sort classes\n    .sort((attrA: Attribute, attrB: Attribute) => {\n      const a = attrA.name.toLowerCase();\n      const b = attrB.name.toLowerCase();\n\n      if (a < b) {\n        return -1\n      }\n\n      if (a > b) {\n        return 1\n      }\n\n      return 0;\n    });\n}\n\nfunction normalizeWhitespace(nodes: DefaultTreeNode[]) {\n  const lastIndex = nodes.length - 1;\n\n  nodes.forEach((node, i: number) => {\n    if (isTextNode(node)) {\n      if (i === 0) {\n        node.value = node.value.replace(/^\\s+/, '')\n      }\n\n      if (i === lastIndex) {\n        node.value = node.value.replace(/\\s+$/, '')\n      }\n    }\n  });\n}\n\nexport function normalizeAST(node: ASTNode) {\n  if (isElement(node)) {\n    node.attrs = sortAttributes(node.attrs)\n  }\n\n  if (isParentNode(node)) {\n    normalizeWhitespace(node.childNodes)\n    node.childNodes.forEach(normalizeAST);\n    node.childNodes = node.childNodes.filter(filterNode);\n  }\n}\n"]}