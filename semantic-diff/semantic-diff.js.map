{"version":3,"file":"semantic-diff.js","sourceRoot":"","sources":["../src/semantic-diff/semantic-diff.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAA+B,MAAM,kBAAkB,CAAC;AAC9E,OAAO,EAAE,QAAQ,EAAE,MAAM,+BAA+B,CAAC;AACzD,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAC;AAAA,CAAC;AAC1D,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAAA,CAAC;AAE3C,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAM9C;;;;;;;;GAQG;AACH,SAAS,gBAAgB,CAAC,QAAiB,EAAE,SAAkB,EAAE,IAAU;IACzE,MAAM,cAAc,GAAG,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,MAAM,eAAe,GAAG,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAE/D,OAAO;QACL,OAAO,EAAE,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE,eAAe,CAAC;QAC9D,IAAI,EAAE,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC;KACvC,CAAC;AACJ,CAAC;AAOD;;;;;;;GAOG;AACH,SAAS,YAAY,CAAC,KAAc;IAClC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAClC;IAED,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAEhD,yFAAyF;IACzF,IAAI,KAAK,YAAY,cAAc,EAAE;QACnC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;KAC1B;SAAM;QACL,MAAM,CAAC,IAAI,CAAA,GAAG,KAAK,EAAE,EAAE,SAAS,CAAC,CAAC;KACnC;IAED,OAAO,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AACjD,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,UAAU,YAAY,CAAC,QAAa,EAAE,SAAc;IACxD,MAAM,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAY,CAAC;IAClE,MAAM,SAAS,GAAG,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,CAAY,CAAC;IAEpE,YAAY,CAAC,QAAQ,CAAC,CAAC;IACvB,YAAY,CAAC,SAAS,CAAC,CAAC;IAExB,0DAA0D;IAC1D,MAAM,MAAM,GAAG,CAAC,IAAY,EAAE,GAAW,EAAE,EAAE,CAAC,GAAG,KAAK,YAAY,CAAA;IAClE,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAuB,CAAC;IAE1E,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QAC3B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,gBAAgB,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,YAAY,CAAC,QAAiB,EAAE,SAAkB;IAChE,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAEjD,IAAI,MAAM,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,cAAc,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;KAC/D;AACH,CAAC","sourcesContent":["import { parseFragment, DefaultTreeDocumentFragment } from 'parse5-es-module';\nimport { deepDiff } from '@bundled-es-modules/deep-diff';\nimport { html, render } from 'lit-html/lib/lit-extended';;\nimport { TemplateResult } from 'lit-html';;\n\nimport { sanitizeHtmlString } from './sanitize-html-string';\nimport { normalizeAST } from './normalize-ast';\nimport { getDiffMessage } from './get-diff-message';\nimport { findDiffedObject } from './find-diffed-object';\nimport { getDiffPath } from './get-diff-path';\nimport { ASTNode } from './types';\n\n// deep-diff types for the module is incorrect\ntype Diff = deepDiff.IDiff;\n\n/**\n * Creates the DiffResult for two AST trees.\n *\n * @param leftTree the left tree\n * @param rightTree the right tree\n * @param diff the semantic difference between the two trees\n *\n * @returns the diff result containing the human readable semantic difference\n */\nfunction createDiffResult(leftTree: ASTNode, rightTree: ASTNode, diff: Diff): DiffResult {\n  const leftDiffObject = findDiffedObject(leftTree, diff.path);\n  const rightDiffObject = findDiffedObject(rightTree, diff.path);\n\n  return {\n    message: getDiffMessage(diff, leftDiffObject, rightDiffObject),\n    path: getDiffPath(leftTree, diff.path),\n  };\n}\n\ninterface DiffResult {\n  message: string;\n  path: string;\n}\n\n/**\n * Turns a value into a HTML string to be processed as HTML AST. If the value is\n * already a string, it is returned as is. Otherwise it is passed to lit-html\n * and rendered to an empty container.\n *\n * @param value the value to string\n * @returns the html as string\n */\nfunction asHTMLString(value: unknown) {\n  if (typeof value === 'string') {\n    return sanitizeHtmlString(value);\n  }\n\n  const container = document.createElement('div');\n\n  // TODO: from lit-html 0.11 onwards we can render directly, no need to wrap in a template\n  if (value instanceof TemplateResult) {\n    render(value, container);\n  } else {\n    render(html`${value}`, container);\n  }\n\n  return sanitizeHtmlString(container.innerHTML);\n}\n\n/**\n * Parses two HTML trees, and generates the semantic difference between the two trees.\n * The HTML is diffed semantically, not literally. This means that changes in attribute\n * and class order and whitespace/newlines are ignored. Also, script and style\n * tags ignored.\n *\n * @param leftHTML the left HTML tree\n * @param rightHTML the right HTML tree\n * @returns the diff result, or undefined if no diffs were found\n */\nexport function semanticDiff(leftHTML: any, rightHTML: any): DiffResult | undefined {\n  const leftTree = parseFragment(asHTMLString(leftHTML)) as ASTNode;\n  const rightTree = parseFragment(asHTMLString(rightHTML)) as ASTNode;\n\n  normalizeAST(leftTree);\n  normalizeAST(rightTree);\n\n  // parentNode causes a circular reference, so ignore them.\n  const ignore = (path: string, key: string) => key === 'parentNode'\n  const diffs = deepDiff(leftTree, rightTree, ignore) as Diff[] | undefined;\n\n  if (!diffs || !diffs.length) {\n    return undefined;\n  }\n\n  return createDiffResult(leftTree, rightTree, diffs[0]);\n}\n\n/**\n * Asserts that the two given HTML trees are semantically equal. See getDiff().\n * Throws a human readable error when there is a difference.\n *\n * @param leftHTML the left HTML tree\n * @param rightHTML the right HTML tree\n */\nexport function assertEquals(leftHTML: unknown, rightHTML: unknown) {\n  const result = semanticDiff(leftHTML, rightHTML);\n\n  if (result) {\n    throw new Error(`${result.message}, at path: ${result.path}`);\n  }\n}\n"]}