{"version":3,"file":"get-diff-path.js","sourceRoot":"","sources":["../src/semantic-diff/get-diff-path.ts"],"names":[],"mappings":"AAAA,OAAO,EAAyB,YAAY,EAAE,SAAS,EAAU,MAAM,SAAS,CAAC;AAEjF,SAAS,WAAW,CAAC,IAAkB;IACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO;KACR;IAED,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IAChF,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5C,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,EAAE,EAAE,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,IAAyB,EAAE,IAAc;IACnE,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,IAAI,IAAI,GAAmC,IAAI,CAAC;IAEhD,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;QACvB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAC3B,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;gBACvB,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,qBAAqB,IAAI,kBAAkB,CAAC,CAAC;aAC9D;SAEF;aAAM,IAAI,IAAI,KAAK,YAAY,EAAE;YAChC,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;gBACtB,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;aACxB;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aACjE;SAEF;aAAM;YACL,kEAAkE;YAClE,oBAAoB;YACpB,MAAM;SACP;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,IAAI,EAAE;gBACR,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;SACF;KACF;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3B,CAAC","sourcesContent":["import { DiffedObject, ASTNode, isParentNode, isElement, isNode } from './types';\n\nfunction getNodeName(node: DiffedObject) {\n  if (!isElement(node)) {\n    return;\n  }\n\n  const idAttr = node.attrs && node.attrs.find((attr: any) => attr.name === 'id');\n  const id = idAttr ? `#${idAttr.value}` : '';\n  return `${node.nodeName}${id}`;\n}\n\nexport function getDiffPath(root: ASTNode | ASTNode[], path: string[]) {\n  const names = [];\n  let node: DiffedObject | DiffedObject[]  = root;\n\n  for (const step of path) {\n    if (Array.isArray(node)) {\n      const i = parseFloat(step);\n      if (Number.isInteger(i)) {\n        node = node[i];\n      } else {\n        throw new Error(`Non-integer step: ${step} for array node.`);\n      }\n\n    } else if (step === 'childNodes') {\n      if (isParentNode(node)) {\n        node = node.childNodes;\n      } else {\n        throw new Error(`Cannot read childNodes from non-parent node.`);\n      }\n\n    } else {\n      // Break loop if we end up at a type of path section we don't want\n      // walk further into\n      break;\n    }\n\n    if (!Array.isArray(node)) {\n      const name = getNodeName(node);\n      if (name) {\n        names.push(name);\n      }\n    }\n  }\n\n  return names.join(' > ');\n}"]}