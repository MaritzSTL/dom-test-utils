{"version":3,"file":"test-fixture.js","sourceRoot":"","sources":["../src/test-fixture/test-fixture.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAE9D,SAAS,aAAa,CAAC,KAAc;IACnC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,IAAI,CAAA,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;KACnC;IAED,IAAI,KAAK,YAAY,cAAc,EAAE;QACnC,OAAO,KAAK,CAAC;KACd;IAED,yEAAyE;IACzE,OAAO,IAAI,CAAA,GAAG,KAAK,EAAE,CAAC;AACxB,CAAC;AAED,MAAM,eAAgB,SAAQ,WAAW;IACvC,QAAQ;QACN,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACtC;IACH,CAAC;IAED,YAAY,CAAC,KAAc;QACzB,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,YAAY,CAAC,KAAc;QACzB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;CACF;AAED,cAAc,CAAC,MAAM,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;AAE5D;;;;;;;;;;GAUG;AACH,MAAM,UAAU,eAAe,CAAC,KAAc;IAC5C,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IAC5D,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAEnC,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAE1B,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,KAAc;IAC9C,MAAM,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;IACvC,MAAM,aAAa,CAAC;IACpB,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { TemplateResult } from 'lit-html/lit-html';\nimport { render, html } from 'lit-html/lib/lit-extended';\nimport { unsafeHTML } from 'lit-html/lib/unsafe-html';\nimport { waitForRender } from '../async-utils';\nimport { assertEquals } from '../semantic-diff/semantic-diff';\n\nfunction toLitTemplate(value: unknown) {\n  if (typeof value === 'string') {\n    return html`${unsafeHTML(value)}`;\n  }\n\n  if (value instanceof TemplateResult) {\n    return value;\n  }\n\n  // TODO: we can render anything directly without wrapping in 0.11 onwards\n  return html`${value}`;\n}\n\nclass HTMLTestFixture extends HTMLElement {\n  teardown() {\n    if (this.parentElement) {\n      this.parentElement.removeChild(this);\n    }\n  }\n\n  assertEquals(value: unknown) {\n    assertEquals(this.innerHTML, value);\n  }\n\n  expectEquals(value: unknown) {\n    this.assertEquals(value);\n  }\n}\n\ncustomElements.define('html-test-fixture', HTMLTestFixture);\n\n/**\n * Sets up a test fixture and renders the given value to the DOM.\n * To avoid memory leaks, call teardown() after the test finished.\n *\n * This function returns synchronously, if dependent on async rendering\n * use the testFixture() function instead.\n *\n * @param value the value to render. A string is rendered as HTML, any other\n * values are passed to lit-html directly. Any valid lit value can be rendered.\n * @returns the test fixture.\n */\nexport function testFixtureSync(value: unknown) {\n  const fixture = document.createElement('html-test-fixture');\n  document.body.appendChild(fixture);\n\n  const template = toLitTemplate(value);\n  render(template, fixture);\n\n  return fixture;\n}\n\n/**\n * Sets up a test fixtures, and waits for one render cycle to complete. Use this\n * if dependent on async rendering. See testFixtureSync() for more.\n *\n * @param value the value to render.\n * @returns a promise that resolves with the test fixture after one render cycle.\n */\nexport async function testFixture(value: unknown) {\n  const fixture = testFixtureSync(value);\n  await waitForRender;\n  return fixture;\n}\n\n"]}